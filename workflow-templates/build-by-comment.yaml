name: Docker Build by comment '/build'

on:
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: ${{ startsWith(github.event.comment.body, '/build') }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Extract argument from comment
        run: |
          ARG=$(echo "${{ github.event.comment.body }}" | cut -d' ' -f2-)
          if [ -n "$ARG" ]; then
            echo "ARG=${ ARG }" >> $GITHUB_ENV
          fi

      - name: Extract name from package.json
        uses: sergeysova/jq-action@v2
        id: name
        with:
          cmd: 'jq .name package.json -r'

      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: Get Git Commit SHA
        run: |
          echo "COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/app/Dockerfile
          platforms: linux/amd64
          push: true
          tags: lambda256/{{ steps.name.outputs.value }}:v${{ steps.version.outputs.value }}-${{ env.COMMIT_SHA }}
          build-args: |
            "PAU=${{vars.PA_USERNAME_LUNIVERSEDEVOPS}}"
            "PAT=${{secrets.PA_TOKEN_LUNIVERSEDEVOPS}}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger helm repos workflow
        uses: actions/github-script@v7
        if: ${{ env.ARG != '' }}
        with:
          github-token: ${{ secrets.PA_TOKEN_LUNIVERSEDEVOPS }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: '<Namespace>-helm-chart',
              event_type: 'webhook',
              client_payload: {
                actor: '${{ github.actor }}',
                stage: '${{ env.ARG }}',
                applicationName: {{ steps.name.outputs.value }},
                imageTag: 'lambda256/{{ steps.name.outputs.value }}:v${{ steps.version.outputs.value }}-${{ env.COMMIT_SHA }}'
              }
            })

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({            
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Docker image built and pushed successfully'
            })

      - name: Send Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # This data can be any valid JSON from a previous step in the GitHub Action
          payload: |
            {
              "image": "lambda256/{{ steps.name.outputs.value }}:v${{ steps.version.outputs.value }}-${{ env.COMMIT_SHA }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
